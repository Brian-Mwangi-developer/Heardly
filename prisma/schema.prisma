// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ConversationTypeEnum {
  EMAIL
  WEBINAR
}

enum AttendedTypeEnum {
  REGISTERED
  ATTENDED
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  CONVERTED
}

enum CtaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum WebinarStatusEnum {
  SCHEDULED
  WAITING_ROOM
  LIVE
  ENDED
  CANCELLED
}

enum CallStatusEnum {
  PENDING
  InProgress
  COMPLETED
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}

enum EmailLabel {
  inbox
  sent
  draft
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model User {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String       @db.VarChar(100)
  clerkId      String       @unique
  email        String       @unique
  accounts     Account[]
  profileImage String
  webinars     Webinar[]    @relation("PresenterWebinars")
  stripeConnectId String? @db.VarChar(255)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subscription Boolean @default(false)
  stripeCustomerId String? @db.VarChar(255)

  @@index([email])
  @@index([clerkId])
}
model Conversation{
    id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    vcon         Json?
    threadId    String
    thread       Thread                @relation(fields: [threadId], references: [id])
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}
model Account {
  id     String @id @default(cuid())
  userId String 

  accessToken    String  @unique
  emailAddress   String
  name           String
  nextDeltaToken String?
  oramaIndex     Json?

  user         User           @relation(fields: [userId], references: [clerkId])
  Thread       Thread[]
  EmailAddress EmailAddress[]
}
model Thread {
  id              String   @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Account  @relation(fields: [accountId], references: [id])

  done Boolean @default(false)


  inboxStatus Boolean @default(true)
  draftStatus Boolean @default(false)
  sentStatus  Boolean @default(false)
  conversation Conversation[]
  emails Email[]
  emailAnalysis EmailAnalysis?
  campaignThreads CampaignThread[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id])
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel EmailLabel @default(inbox)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}
enum CampaignStatusEnum {
  ACTIVE
  PAUSED
  COMPLETED
}
model Campaign {
  id              String              @id @default(cuid())
  name            String
  description     String?
  targetAudience  String
  goals           String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  status          CampaignStatusEnum
  emailCount      Int                 @default(0)
  potentialCount  Int                 @default(0)
  queryCount      Int                 @default(0)
  deadCount       Int                 @default(0)
  
  campaignThreads CampaignThread[]
}

model CampaignThread {
  id           String   @id @default(cuid())
  campaignId   String
  threadId     String
  category     String   // 'potential', 'query', 'dead', 'unknown'
  assignedAt   DateTime @default(now())
  
  // Relations
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  thread       Thread   @relation(fields: [threadId], references: [id])
  
  @@unique([campaignId, threadId]) // Prevent duplicate assignments
}



model EmailAnalysis {
  id           String   @id @default(cuid())
  threadId     String
  thread       Thread   @relation(fields: [threadId], references: [id])
  analysis     Json    
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([threadId])
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  @@unique([accountId, address])
}
model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id])
  emailId         String
}

model Webinar {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String            @db.VarChar(255)
  description   String?           @db.Text
  startTime     DateTime
  endTime       DateTime?
  duration      Int               @default(0) // Duration in minutes
  webinarStatus WebinarStatusEnum @default(SCHEDULED)
  presenterId   String            @db.Uuid
  presenter     User              @relation("PresenterWebinars", fields: [presenterId], references: [id], onDelete: Cascade)
  attendances   Attendance[]
  tags          String[]
  ctaLabel      String?           @db.VarChar(50)
  ctaType       CtaTypeEnum
  ctaUrl        String?           @db.VarChar(255)
  couponCode    String?           @db.VarChar(50)
  couponEnabled Boolean           @default(false)
  couponExpiry  DateTime?
  lockChat      Boolean           @default(false)
  stripeProductId String?         @db.VarChar(255)
  aiAgentId     String?           @db.Uuid
  priceId     String?          @db.VarChar(255)
  recordingUrl  String?
  thumbnail     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?
  Attendee      Attendee?         @relation(fields: [attendeeId], references: [id])
  attendeeId    String?           @db.Uuid

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
}


model Attendee {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String       @unique
  name       String       @db.VarChar(100)
  callStatus CallStatusEnum @default(PENDING)
  Attendance Attendance[]
  Webinar    Webinar[]
  createdAt  DateTime     @default(now()) 
  updatedAt  DateTime     @updatedAt
}

model Attendance {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId       String           @db.Uuid
  joinedAt        DateTime         @default(now())
  leftAt          DateTime?
  user            Attendee         @relation(fields: [attendeeId], references: [id])
  webinar         Webinar          @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  attendedType    AttendedTypeEnum
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attendeeId      String           @db.Uuid
  userId          String?          @db.Uuid

  @@unique([attendeeId, webinarId]) // âœ… This enforces 1 attendee per webinar
  @@index([webinarId])
  @@index([attendedType])
}
